<?xml version="1.0"?>
<launch>
  <!-- You can change control program  -->
  <arg name="robot_name" default=""/> <!-- robot_name for use NAMESPACE -->
  <arg name="side" default="b"/> <!-- "b" = blue side, "r" = red side  -->
  <!-- sample program node 
  <node pkg="burger_war" type="xlfsRun.py" name="xlfsRun" output="screen"/>
  -->
  <!-- END sample program node -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg robot_name)"/>
  </node>
  
  <!-- Arguments -->
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="map_file" default="$(find burger_navigation)/maps/map.yaml"/>
  <arg name="move_forward_only" default="True"/>
  <!-- Map server -->
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)">
      <remap from="map" to="/$(arg robot_name)/map"/>
    </node>


  <!-- Arguments -->
  <arg name="scan_topic"     default="/$(arg robot_name)/scan"/>
  <!--
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="-1.3"/>
  <arg name="initial_pose_a" default="1.57"/>
  -->
  <!-- AMCL -->
  <node pkg="amcl" type="amcl" name="amcl">
    <param name="min_particles"             value="100"/>
    <param name="max_particles"             value="500"/>
    <param name="kld_err"                   value="0.02"/>
    <param name="update_min_d"              value="0.10"/>
    <param name="update_min_a"              value="0.10"/>
    <param name="resample_interval"         value="1"/>
    <param name="transform_tolerance"       value="0.5"/>
    <param name="recovery_alpha_slow"       value="0.00"/>
    <param name="recovery_alpha_fast"       value="0.00"/>
    <!--
    <param name="initial_pose_x"            value="$(arg initial_pose_x)"/>
    <param name="initial_pose_y"            value="$(arg initial_pose_y)"/>
    <param name="initial_pose_a"            value="$(arg initial_pose_a)"/>
    -->
    <rosparam file="$(find burger_war)/param/initial_pose_$(arg side).yaml" command="load" />

    <param name="gui_publish_rate"          value="50.0"/>
    <!-- <remap from="scan"                      to="$(arg scan_topic)"/> -->
    <remap from="scan"                      to="/$(arg robot_name)/scan"/>
    <param name="laser_max_range"           value="3.5"/>
    <param name="laser_max_beams"           value="180"/>
    <param name="laser_z_hit"               value="0.5"/>
    <param name="laser_z_short"             value="0.05"/>
    <param name="laser_z_max"               value="0.05"/>
    <param name="laser_z_rand"              value="0.5"/>
    <param name="laser_sigma_hit"           value="0.2"/>
    <param name="laser_lambda_short"        value="0.1"/>
    <param name="laser_likelihood_max_dist" value="2.0"/>
    <param name="laser_model_type"          value="likelihood_field"/>
    <param name="odom_model_type"           value="diff"/>
    <param name="odom_alpha1"               value="0.1"/>
    <param name="odom_alpha2"               value="0.1"/>
    <param name="odom_alpha3"               value="0.1"/>
    <param name="odom_alpha4"               value="0.1"/>
    <param name="odom_frame_id"             value="/$(arg robot_name)/odom"/>
    <param name="base_frame_id"             value="/$(arg robot_name)/base_footprint"/>
  </node>
  
  <!-- Arguments -->
  <arg name="cmd_vel_topic" default="/$(arg robot_name)/cmd_vel" />
  <arg name="odom_topic" default="/$(arg robot_name)/odom" />
  <!-- move_base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <rosparam file="$(find burger_war)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find burger_war)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find burger_war)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find burger_war)/param/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find burger_war)/param/move_base_params.yaml" command="load" />
    <rosparam file="$(find burger_war)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
    
    <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
    <remap from="odom" to="$(arg odom_topic)"/>
    <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />

    <param name="local_costmap/global_frame"             value="$(arg robot_name)/odom"/>
    <param name="local_costmap/robot_base_frame"             value="$(arg robot_name)/base_footprint"/>
    <param name="global_costmap/robot_base_frame"            value="$(arg robot_name)/base_footprint"/>
    <param name="global_costmap/global_frame"            value="map"/>
    <param name="global_costmap/scan/sensor_frame"            value="/$(arg robot_name)/base_scan"/>
    <param name="global_costmap/scan/topic"            value="/$(arg robot_name)/scan"/>
    <param name="local_costmap/scan/sensor_frame"            value="/$(arg robot_name)/base_scan"/>
    <param name="local_costmap/scan/topic"            value="/$(arg robot_name)/scan"/>
  </node>
  <node pkg="burger_war" type="run_robot_sim.py" name="run_robot" output="screen" />
  <node pkg="burger_war" type="estimateEnemyPos_sim.py" name="estimateEnemyPos" output="screen" />
  
  <!-- End of your space  -->
</launch>

